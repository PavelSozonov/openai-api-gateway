server {
    listen 80;
    server_name ${DOMAIN};

    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name ${DOMAIN};

    ssl_certificate /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";

    # Other existing configurations
    limit_req_zone $binary_remote_addr zone=api:10m rate=${RATE_LIMIT};
    client_max_body_size ${CLIENT_MAX_BODY_SIZE};

    location / {

        # Pre-flight requests (OPTIONS)
        if ($request_method = "OPTIONS") {
            add_header "Access-Control-Allow-Origin" "${CORS_ORIGIN}";
            add_header "Access-Control-Allow-Methods" "${CORS_METHODS}";
            add_header "Access-Control-Allow-Headers" "${CORS_HEADERS}";
            add_header "Access-Control-Allow-Credentials" "${CORS_CREDENTIALS}";
            add_header "Access-Control-Max-Age" ${CORS_MAX_AGE};
            add_header "Content-Length" ${CONTENT_LENGTH};
            add_header "Content-Type" "${CONTENT_TYPE}";
            return 204;
        }

        # If the client is not authorized ($http_authorization not equals to "Bearer ${GATEWAY_API_KEY}"), return an HTTP 401 Unauthorized status code
        if ($http_authorization != "Bearer ${GATEWAY_API_KEY}") {
            return 401;
        }

        # Set the proxy server to be used for requests
        proxy_pass ${OPENAI_API_HOST};

        # Set the header fields for requests being proxied
        proxy_set_header Authorization "Bearer ${OPENAI_API_KEY}";
        proxy_set_header api-key "${OPENAI_API_KEY}";

        # Turn off buffering of responses from the proxy server
        proxy_buffering off;

        # Transfer the host name from the request line to the SSL handshake
        proxy_ssl_server_name on;

        # Enable limiting of requests by defining its parameters with this directive
        limit_req zone=api;

        # Return client status 429 (Too Many Requests) when the rate of requests exceeds the defined limit
        limit_req_status 429;
    }
}
